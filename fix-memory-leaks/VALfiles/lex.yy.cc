
#line 3 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 108
#define YY_END_OF_BUFFER 109
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[713] =
    {   0,
      106,  106,  109,  108,  103,  105,  108,    1,    2,   93,
       91,   92,   94,  106,  100,  108,   97,   64,   95,   99,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,    3,    4,  102,  103,   72,  106,
      107,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  104,
       98,   96,  102,  102,  102,  102,  102,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,   51,  102,  102,  102,  102,  102,  102,  102,  102,
      107,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  102,   50,  102,    0,    0,  102,  102,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,   55,  102,  102,  102,  102,  102,  102,  102,  102,
      102,    0,    8,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  102,  102,    0,  101,    0,
        0,  102,  102,  102,  102,  102,  102,  102,  102,  102,

      102,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,   56,  102,   75,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       63,   62,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   17,    0,
        0,    0,  102,  102,  101,    0,    0,  102,  102,  102,
      102,  102,  102,  102,  102,  102,   54,  102,  102,  102,
      102,    0,  102,  102,  102,  102,  102,  102,  102,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       34,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   23,    0,    0,   82,   80,  101,
       43,    0,  102,  102,   30,   31,  102,   58,   52,   53,
      102,  102,  102,  102,  102,  102,    0,  102,  102,  102,
      102,  102,  102,   84,   32,    0,    0,    0,    0,    0,
        0,   60,    0,   45,    0,    0,    0,    0,    0,    0,
        0,    0,   65,   68,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   66,    0,    7,    0,    9,
        0,  102,    0,  102,  102,  102,  102,  102,  102,  102,
      102,  102,    0,  102,   59,  102,  102,  102,  102,  102,

        0,    0,    0,    0,   36,    0,    0,    0,    0,    0,
        0,    0,   16,    0,    0,    0,    0,    0,   61,    0,
        0,    0,    0,    0,   33,    0,    0,    0,    0,    0,
      102,   42,  102,   77,   73,  102,  102,   76,  102,   70,
       69,   44,  102,  102,   78,   83,  102,   57,    0,    0,
        0,    0,    0,    0,   49,    0,    0,    6,    0,    0,
        0,    0,    0,    0,    0,   67,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  102,  102,  102,  102,  102,
      102,  102,  102,  102,   39,   20,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   22,    0,   48,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  102,
      102,   90,  102,  102,   81,   79,  102,  102,   74,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   37,    0,   21,    0,    0,    0,    0,    0,
        0,  102,  102,   89,   71,  102,  102,    0,   19,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   18,    0,    0,    0,    0,    0,  102,   85,  102,
      102,    0,    0,    0,    0,    0,    0,    0,    0,   47,
        0,    0,    0,   38,    0,    5,    0,    0,    0,   88,
      102,  102,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   86,  102,    0,
        0,    0,    0,    0,    0,    0,    0,   46,    0,    0,
        0,    0,    0,    0,   87,    0,    0,    0,    0,    0,
       35,    0,    0,    0,   15,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   24,   41,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   26,   28,    0,    0,    0,    0,
        0,   40,    0,    0,   14,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       25,    0,    0,    0,    0,    0,    0,    0,   27,    0,

       29,    0,    0,    0,    0,   12,    0,    0,   13,   10,
       11,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    1,    5,    1,    1,    1,    1,    6,
        7,    8,    9,    1,   10,   11,   12,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   14,   15,   16,
       17,   18,   19,    1,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,    1,   47,    1,   30,    1,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   57,   30,   58,   59,   60,
       61,   62,   63,   64,   65,   66,   67,   68,   69,   70,
       71,   72,    1,    1,    1,    1,    1,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
        1,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,    1,   30,   30,   30,   30,   30,   30,   30,
       30,    1,    1,    1,   30,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[73] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    1,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2
    } ;

static yyconst flex_int16_t yy_base[716] =
    {   0,
        0,   34,  570, 1747,   72, 1747,   36, 1747, 1747, 1747,
     1747,  527, 1747,   66,   83,  532,  497, 1747,  489, 1747,
      141,   68,  142,   70,  143,  147,  151,   76,  152,  177,
      158,  178,  183,  192, 1747, 1747,  221,   80, 1747,   74,
      487,  147,   67,  202,  231,  212,  124,  190,   73,   75,
      213,   89,  209,  184,  208,  237,  231,  202,  495, 1747,
     1747, 1747,    0,   78,  268,  273,  275,  296,  282,  280,
      301,  295,  308,  306,  310,  312,  332,   80,  316,  317,
      318,   82,  336,  338,  343,  363,  342,  365,  370,  383,
      463,  278,  327,  334,  334,  341,  355,  355,  213,  346,

      360,  377,  374,  371,  365,  374,  390,  383,  380,  377,
      392,  388,  392,  386,  401,  406,  392,  396,  421,  405,
      409,  417,  446,  165,  455,  468,  478,  416,  464,  476,
      477,  483,  482,  495,  497,  511,  505,  509,  411,  510,
      516,  529,  537,  539,  538,  544,  543,  545,  558,  567,
      572,  456, 1747,  560,  471,  484,  541,  549,  552,  457,
      558,  548,  548,  559,  560,  566,  559,  561,  583,  579,
      572,  590,  590,  591,  599,  598,  606,  597,  592,  606,
      600,  607,  615,  616,  605,  640,  645,  450,  214,  619,
      615,  626,  656,  664,  665,  673,  678,  679,  685,  672,

      690,  696,  648,  697,  704,  709,  713,  715,  725,  731,
      737,  742,  744,  749,  671,  723,  676,  725,  690,  693,
      736,  701,  749,  734,  743,  736,  737,  747,  747,  743,
     1747,  755,  748,  747,  759,  750,  753,  769,  789,  764,
      776,  782,  784,  771,  786,  798,  783,  788,  801,  788,
      794,  804,  820,  828,  448,  806,  811,  797,  850,  854,
      856,  855,  862,  863,  861,  857,  830,  874,  821,  887,
      897,  831,  880,  899,  908,  914,  919,  920,  921,  853,
      875,  900,  902,  914,  903,  907,  917,  908,  912,  922,
     1747,  928,  447,  916,  928,  937,  930,  932,  943,  940,

      941,  932,  941,  951,  944,  957,  946,  951,  962,  955,
      963,  402,  957,  393, 1747,  974,  965,  995,  996,  353,
     1747,  974,  973, 1004, 1010, 1014, 1020, 1021, 1022, 1027,
      988,  985, 1033,  995, 1034, 1035, 1005, 1048, 1046, 1026,
     1052, 1016, 1063, 1047, 1747, 1036, 1034, 1048, 1030, 1051,
     1053, 1747, 1049, 1747, 1061, 1050, 1058, 1062, 1057, 1065,
     1070, 1084, 1747, 1747, 1067, 1087, 1074, 1095, 1082, 1100,
     1104, 1101, 1089, 1104, 1106, 1747, 1098, 1747, 1103, 1747,
     1096, 1094, 1099,  323, 1131, 1133, 1101, 1105, 1158, 1125,
     1162, 1164, 1118, 1168, 1174, 1128, 1129, 1182, 1142, 1184,

     1146, 1146, 1162, 1162,  305, 1160, 1167, 1178, 1181, 1161,
     1169, 1184, 1747, 1178,  287, 1180, 1191,  261, 1747, 1186,
     1195, 1194, 1185, 1192, 1747, 1201, 1201, 1199, 1206, 1221,
     1214, 1747, 1211, 1236, 1243, 1230, 1227, 1248, 1220, 1252,
     1254, 1747, 1258, 1231,    0, 1264, 1243, 1266, 1245, 1246,
     1252, 1247, 1253, 1253,  223,  211, 1255, 1747, 1262, 1266,
     1255, 1270, 1257,  205, 1272, 1747, 1262, 1262, 1279, 1282,
     1282, 1283, 1286, 1285, 1286, 1282, 1291, 1290, 1296, 1306,
     1323, 1304, 1319, 1318, 1323, 1747, 1306, 1308, 1312, 1309,
     1324, 1333, 1322, 1337, 1335, 1747, 1335, 1747, 1327, 1332,

     1327, 1338, 1331, 1350, 1355, 1350, 1357, 1345,  182, 1359,
     1369,    0, 1367, 1372, 1282,    0, 1372, 1374,    0, 1369,
     1363,  163, 1379, 1380, 1375, 1383, 1386, 1381, 1391, 1390,
     1380, 1378, 1747, 1386, 1747, 1384,  157, 1385, 1395, 1402,
     1399, 1408, 1414,    0,    0, 1401, 1417,  153, 1747, 1422,
     1425,  149, 1426, 1413, 1425,  120, 1416, 1433, 1435, 1436,
     1429, 1747, 1428, 1427, 1435, 1449, 1434, 1439,    0, 1449,
     1441, 1453, 1455, 1455, 1451, 1455, 1456, 1454, 1459, 1747,
     1474, 1478, 1470, 1747, 1467, 1747, 1483, 1478, 1483,    0,
     1473, 1477, 1490, 1491, 1495, 1482, 1482, 1489, 1497, 1490,

     1490, 1498, 1494, 1514, 1511,  119, 1518,    0, 1518, 1522,
     1524, 1531, 1528, 1535, 1524, 1524, 1537, 1747, 1530, 1526,
     1543, 1530, 1540, 1538,    0, 1549, 1552, 1538, 1556, 1550,
     1544, 1553, 1565, 1565, 1747, 1558, 1566, 1567, 1564, 1578,
     1564, 1581, 1573, 1582, 1747, 1747, 1578, 1586, 1584, 1584,
     1581, 1598, 1586, 1588, 1589, 1596, 1592, 1599, 1596, 1613,
     1607, 1613, 1613, 1605, 1747, 1747, 1623, 1620, 1627, 1623,
     1627, 1747, 1620, 1621, 1747, 1633, 1639, 1638, 1634, 1632,
     1652, 1645, 1636, 1639, 1641, 1648, 1654, 1654, 1652, 1660,
     1747, 1662, 1654, 1659, 1658, 1664, 1665, 1669, 1747, 1672,

     1747, 1668, 1676, 1678, 1676, 1747, 1677, 1679, 1747, 1747,
     1747, 1747, 1744,  110,   92
    } ;

static yyconst flex_int16_t yy_def[716] =
    {   0,
      712,    1,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  713,  712,  712,  712,  712,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  712,  712,  714,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  713,  712,
      712,  712,  715,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,

      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  714,  714,  714,  712,  712,  715,  714,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  715,  714,
      714,  714,  714,  714,  714,  714,  714,  714,  714,  714,
      714,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  714,  714,  712,  712,  712,
      712,  715,  714,  714,  714,  714,  714,  714,  714,  714,

      714,  714,  715,  714,  714,  714,  714,  714,  714,  714,
      714,  714,  714,  714,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  714,  714,  712,  712,  712,  715,  714,  714,
      714,  714,  714,  714,  714,  715,  714,  714,  715,  714,
      714,  712,  714,  714,  714,  714,  714,  714,  714,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,

      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  714,  714,  712,
      712,  712,  715,  714,  714,  714,  714,  714,  714,  714,
      715,  715,  714,  715,  714,  714,  712,  714,  714,  715,
      714,  715,  714,  714,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  715,  712,  715,  714,  714,  715,  715,  714,  715,
      714,  714,  712,  714,  714,  715,  715,  714,  715,  714,

      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      715,  712,  715,  714,  714,  715,  715,  714,  715,  714,
      714,  712,  714,  715,  715,  714,  715,  714,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  715,  715,  715,  715,  715,
      714,  715,  715,  715,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,

      712,  712,  712,  712,  712,  712,  712,  712,  712,  715,
      715,  715,  715,  715,  714,  715,  715,  715,  715,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  715,  715,  715,  715,  715,  715,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  715,  715,  715,
      715,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  715,
      715,  715,  712,  712,  712,  712,  712,  712,  712,  712,

      712,  712,  712,  712,  712,  712,  712,  715,  715,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  715,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,

      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,    0,  712,  712,  712
    } ;

static yyconst flex_int16_t yy_nxt[1820] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
        4,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   22,   23,   24,   25,   22,   26,   27,   22,   22,
       22,   28,   29,   30,   31,   22,   22,   32,   33,   22,
       22,   34,   22,   22,   22,   35,   36,   21,   22,   22,
       23,   24,   25,   22,   26,   27,   22,   22,   28,   29,
       30,   31,   22,   22,   32,   33,   22,   22,   34,   22,
       22,   22,   37,   38,   39,   38,   41,   63,   40,   63,
       63,   38,   63,   38,   41,   63,   40,   63,   63,  139,
       63,   63,   63,   63,   63,   79,  109,   72,  110,   37,

       94,   39,   42,   80,   43,   44,   45,   46,   47,  113,
       48,   64,   73,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   58,   79,  109,   72,  110,   94,  623,  579,
       42,   80,   43,   44,   45,   46,   47,  113,   48,   73,
       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       63,   63,   63,   63,   63,   63,   63,  107,  575,   63,
       63,   63,  572,   63,   63,   69,  563,   63,   92,   93,
       63,   65,  550,   66,   63,   70,   74,   63,   67,   68,
       75,   71,   76,   77,  107,   81,   63,   63,   78,   63,
       63,  541,   63,   69,   84,   63,   92,   93,   65,   85,

       66,   63,   70,   74,   63,   67,   68,   75,   71,   76,
       77,   86,   81,   82,  499,   78,   87,   83,   88,   89,
      492,   84,  108,  116,  255,   95,  189,   85,  114,   96,
       63,  117,  491,   63,  122,   97,  111,  159,   86,  104,
       82,   98,  105,   87,   83,  115,   88,   89,   90,  108,
      116,  106,  112,   95,   87,   99,  114,   96,  120,  117,
      118,  122,   97,  100,  111,  159,  101,  104,   98,  105,
      465,  102,  115,  103,  121,  119,   90,   63,  106,  112,
       63,   87,   63,   99,   63,   63,  120,   63,  118,   63,
      100,   63,   63,  101,   63,  124,  462,  126,  102,  127,

      103,  121,  119,  129,   63,  128,  130,   63,   63,  123,
       63,  131,  125,   63,  453,   63,  152,   63,   63,   63,
       63,   63,   63,  124,   63,   63,   63,   63,   63,   63,
       63,  129,  433,  133,  130,  134,  123,  132,  131,  125,
      136,   63,  135,  152,   63,   63,  137,   63,   63,  141,
       63,   63,   63,  138,   63,   63,  142,  153,  140,  143,
      133,  144,  146,  134,  132,  320,  154,  136,  160,  135,
      155,  145,   63,  137,   63,   63,  141,   63,  156,   63,
      148,  138,   63,  142,  153,  140,  157,  143,  149,  144,
      146,  158,   63,  154,  147,   63,  160,  155,  145,  161,

      162,  163,  379,  164,  165,  156,  166,  148,  150,  167,
      168,  377,  170,  157,  151,  171,  149,  172,  158,  173,
      174,  147,  175,  169,  176,  178,  161,  179,  162,  163,
      164,  165,  180,  166,  177,  150,  183,  167,  168,  170,
      181,  151,  171,  184,  185,  172,  173,  192,  174,  175,
      169,  203,  176,  178,  179,   63,  358,  182,   63,  180,
      320,  177,  189,  183,   63,  186,  224,   63,  181,  126,
      184,  126,  185,   63,  192,   91,   63,  188,  203,  126,
      189,  126,  187,  215,  182,   63,   63,  188,   63,   63,
      189,   63,   63,  186,   63,   63,  195,   60,  219,   91,

      193,  190,  196,  194,   63,   62,   63,   63,  197,   63,
      187,  215,  220,   61,   63,  191,  199,   63,   63,   63,
       63,   63,   63,   63,  195,   63,  219,  193,   63,  190,
      196,  194,  198,  200,   60,  201,  197,  204,   63,   40,
      220,   63,  191,  205,  199,  202,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,  208,  198,
      221,  200,  201,  207,  211,  204,  210,   63,  222,  712,
       63,  205,  202,  206,  209,  223,   63,  225,  228,   63,
      226,   63,  216,  229,   63,  227,  208,  230,  221,  231,
      212,  207,  211,  213,  210,  214,  222,  217,  218,  232,

      206,  209,  233,  223,  234,  225,  228,  226,  235,  236,
      216,  229,  227,  237,  238,  230,  231,  212,  239,  240,
      241,  213,  242,  214,  217,  218,  232,  243,  712,  244,
      233,  245,  234,  246,  248,  235,  247,  236,  249,  250,
      712,  237,  238,  251,  712,  252,  239,  240,  241,   63,
      242,  256,   63,  257,   63,  243,  244,   63,  245,  258,
      712,  246,  248,  247,  712,   63,  249,  250,   63,  712,
      254,  251,  252,   63,   63,  269,   63,   63,  256,  259,
      257,  266,   63,  253,   63,   63,  258,   63,   63,  712,
       63,   63,  261,  712,   63,  712,  260,   63,  254,   63,

      712,  263,   63,  269,  280,   63,   63,  259,   63,   63,
      253,  262,  272,   63,  282,  265,   63,  264,   63,  268,
      261,   63,   63,  260,   63,   63,  712,   63,  270,  263,
      284,  280,  285,  267,   63,  271,  273,   63,  262,  287,
       63,  282,  265,   63,  264,  274,   63,  268,  275,   63,
      281,   63,  283,   63,   63,  270,   63,  284,   63,  285,
      267,   63,  271,  286,  273,  278,  287,  277,  289,  276,
      288,  279,  274,  290,  291,  292,  275,  293,  281,  294,
      283,  295,  296,  712,  297,  298,  299,  712,  300,  301,
      302,  286,  712,  278,  277,  289,  276,  305,  288,  279,

      290,  291,  292,  306,  293,  307,  294,  308,  295,  309,
      296,  297,  298,  310,  299,  300,  301,  311,  302,  303,
      304,  312,  313,  314,  305,  315,  316,  317,  321,   63,
      322,  306,   63,  307,  323,  308,  309,   63,  712,   63,
       63,  310,   63,  712,  712,  311,  303,  304,  312,  313,
      337,  314,  315,  316,  334,  317,  321,  318,  322,   63,
      319,  323,   63,   63,   63,   63,   63,   63,   63,  324,
       63,   63,   63,   63,   63,   63,  331,  325,  337,  332,
      712,  334,  327,   63,  318,  345,   63,  319,  326,   63,
      712,  330,   63,  333,  712,  712,   63,  324,  328,   63,

      329,  712,  712,  712,  331,  325,   63,  332,   63,   63,
      327,   63,  345,  346,  335,  326,  338,  340,  330,  347,
       63,  333,  339,   63,  336,  328,   63,  329,  342,   63,
       63,   63,   63,   63,  349,  351,  348,  350,  712,  352,
      346,  341,  335,  338,  353,  712,  354,  347,  355,  356,
      339,  357,  336,  344,  359,  360,  361,  362,  363,  712,
      343,  349,  351,  348,  364,  350,  352,  365,  366,  341,
      367,  368,  353,  354,  369,  355,  370,  356,  371,  357,
      344,  359,  372,  360,  361,  362,  363,  343,  373,  374,
      712,  375,  364,  376,  378,  365,  366,  367,  368,  380,

      712,  381,  369,  370,  382,   63,  371,   63,   63,  372,
      383,  384,  387,   63,  712,  373,   63,  374,  375,   63,
      376,  378,   63,   63,  388,  390,   63,  380,  381,   63,
       63,   63,   63,   63,   63,  393,   63,  383,  384,   63,
      387,  385,   63,   63,   63,   63,   63,   63,  396,  712,
      712,  388,  390,  386,  399,   63,   63,   63,   63,   63,
       63,   63,  393,  401,   63,  397,  402,  403,  385,  404,
      389,  394,   63,  405,  406,   63,  396,  395,  391,  392,
      386,  399,  407,  398,  409,  412,  400,  712,  410,  408,
      411,  401,  397,  402,  413,  403,  404,  389,  414,  394,

      415,  405,  406,  416,  395,  391,  392,  417,  418,  407,
      398,  419,  409,  412,  400,  410,  408,  411,  420,  712,
      421,  413,  422,  423,  424,  414,  425,  415,  426,  427,
      429,  416,  428,  430,  417,  431,  418,  432,  419,  436,
       63,  437,   63,   63,  439,   63,  420,  421,  442,  712,
      422,  423,  424,  425,  434,  712,  426,  427,  429,  428,
      430,  444,  431,  445,  432,  435,  436,   63,  437,  447,
       63,   63,  439,   63,   63,  442,   63,   63,  712,  449,
       63,  438,  434,   63,  450,  440,   63,  441,  444,  451,
      445,   63,  435,   63,   63,  452,   63,  447,  454,  455,

      443,  456,  457,  712,  458,  446,  449,  459,  460,  438,
      461,  450,  463,  440,  464,  441,  466,  451,  467,  712,
      448,  468,  452,  469,  470,  454,  455,  443,  471,  456,
      457,  458,  472,  446,  459,  473,  460,  461,  474,  463,
      475,  476,  464,  466,  477,   63,  467,  448,   63,  468,
      469,  470,   63,  478,  479,   63,  471,   63,  480,  472,
       63,   63,  473,   63,   63,  474,   63,   63,  475,  476,
       63,  477,  482,  483,  484,   63,   63,  485,   63,  481,
      490,  478,  479,  486,  487,  480,  488,  489,  493,  494,
      495,   63,  496,  497,   63,  498,  500,  712,  501,  482,

      502,  484,  503,  504,  485,  505,  506,  481,  490,  507,
      486,  487,  508,  488,  489,  493,  509,  494,  495,  496,
      510,  497,  498,  511,  500,  501,  512,  502,  513,  514,
      503,  504,   63,  505,  506,   63,  516,  507,  517,  518,
      508,  519,  520,  509,  521,  522,  515,  510,  523,  524,
      511,  525,  526,  512,  527,  513,  528,  514,  529,  530,
      712,  531,  532,  516,  533,  534,  517,  518,  535,  519,
      520,  521,  522,  536,  515,  523,  524,  537,  539,  525,
      526,  527,  538,  540,  528,  542,  529,  530,  531,  532,
      543,  533,  544,  534,  545,  535,  546,  547,  712,  548,

      549,  536,  551,  552,  554,  537,  539,  553,  555,  538,
      540,  556,  557,  542,  558,  712,  559,  560,  543,  561,
      544,  562,  545,  564,  546,  547,  548,  549,  565,  566,
      551,  552,  554,  567,  553,  568,  555,  569,  556,  570,
      557,  571,  558,  559,  560,  573,  561,  574,  562,  576,
      564,  577,  578,  712,  580,  565,  581,  566,  582,  583,
      567,  584,  585,  568,  586,  569,  570,  587,  588,  571,
      589,  590,  591,  573,  592,  574,  593,  576,  577,  594,
      578,  580,  595,  598,  581,  596,  582,  583,  584,  585,
      597,  586,  599,  600,  587,  601,  588,  589,  590,  602,

      591,  592,  603,  604,  593,  605,  607,  594,  606,  608,
      595,  598,  596,  609,  610,  611,  612,  597,  613,  599,
      600,  614,  615,  601,  616,  712,  617,  602,  618,  603,
      604,  619,  620,  605,  607,  606,  608,  621,  622,  624,
      609,  625,  610,  611,  612,  613,  626,  627,  614,  615,
      628,  629,  616,  617,  630,  618,  631,  632,  619,  620,
      633,  712,  634,  635,  636,  621,  622,  624,  637,  625,
      638,  639,  640,  641,  626,  627,  642,  643,  628,  629,
      644,  645,  630,  631,  632,  646,  647,  648,  633,  634,
      635,  649,  636,  650,  651,  637,  652,  638,  639,  653,

      640,  641,  654,  642,  655,  643,  656,  644,  645,  657,
      712,  658,  646,  659,  647,  648,  660,  661,  649,  662,
      663,  650,  651,  652,  664,  665,  666,  653,  667,  654,
      668,  669,  655,  656,  670,  671,  673,  657,  658,  672,
      674,  659,  675,  660,  661,  676,  662,  677,  663,  678,
      679,  664,  665,  666,  680,  667,  681,  668,  669,  682,
      683,  670,  684,  671,  673,  685,  672,  686,  674,  675,
      687,  688,  689,  676,  690,  677,  691,  678,  679,  692,
      693,  694,  680,  681,  695,  696,  682,  697,  683,  698,
      684,  699,  700,  685,  686,  701,  702,  687,  703,  688,

      689,  690,  704,  691,  705,  706,  692,  693,  707,  694,
      708,  695,  696,  709,  710,  697,  711,  698,  699,  700,
      712,  712,  701,  702,  712,  703,  712,  712,  712,  704,
      712,  705,  706,  712,  712,  707,  712,  708,  712,  712,
      709,  710,  712,  711,   59,   59,    3,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,

      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712
    } ;

static yyconst flex_int16_t yy_chk[1820] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    5,    7,    5,   14,   22,   14,   24,
       22,   38,   24,   38,   40,   28,   40,   64,   28,   78,
       64,   82,   78,  715,   82,   28,   49,   24,   50,    2,

       43,    7,   15,   28,   15,   15,   15,   15,   15,   52,
       15,  714,   24,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   28,   49,   24,   50,   43,  606,  556,
       15,   28,   15,   15,   15,   15,   15,   52,   15,   24,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       21,   23,   25,   21,   23,   25,   26,   47,  552,   26,
       27,   29,  548,   27,   29,   23,  537,   31,   42,   42,
       31,   21,  522,   21,  124,   23,   25,  124,   21,   21,
       26,   23,   27,   27,   47,   29,   30,   32,   27,   30,
       32,  509,   33,   23,   31,   33,   42,   42,   21,   32,

       21,   34,   23,   25,   34,   21,   21,   26,   23,   27,
       27,   32,   29,   30,  464,   27,   33,   30,   34,   34,
      456,   31,   48,   54,  189,   44,  189,   32,   53,   44,
       37,   55,  455,   37,   58,   44,   51,   99,   32,   46,
       30,   44,   46,   33,   30,   53,   34,   34,   37,   48,
       54,   46,   51,   44,   37,   45,   53,   44,   57,   55,
       56,   58,   44,   45,   51,   99,   45,   46,   44,   46,
      418,   45,   53,   45,   57,   56,   37,   65,   46,   51,
       65,   37,   66,   45,   67,   66,   57,   67,   56,   70,
       45,   69,   70,   45,   69,   66,  415,   68,   45,   68,

       45,   57,   56,   69,   72,   68,   69,   72,   68,   65,
       71,   70,   67,   71,  405,   74,   92,   73,   74,   75,
       73,   76,   75,   66,   76,   79,   80,   81,   79,   80,
       81,   69,  384,   72,   69,   73,   65,   71,   70,   67,
       75,   77,   74,   92,   77,   83,   76,   84,   83,   80,
       84,   87,   85,   77,   87,   85,   81,   93,   79,   83,
       72,   84,   85,   73,   71,  320,   94,   75,  100,   74,
       95,   84,   86,   76,   88,   86,   80,   88,   96,   89,
       87,   77,   89,   81,   93,   79,   97,   83,   88,   84,
       85,   98,   90,   94,   86,   90,  100,   95,   84,  101,

      102,  103,  314,  104,  105,   96,  106,   87,   89,  107,
      108,  312,  109,   97,   90,  110,   88,  111,   98,  112,
      113,   86,  114,  108,  115,  116,  101,  117,  102,  103,
      104,  105,  118,  106,  115,   89,  120,  107,  108,  109,
      119,   90,  110,  121,  122,  111,  112,  128,  113,  114,
      108,  139,  115,  116,  117,  123,  293,  119,  123,  118,
      255,  115,  188,  120,  125,  123,  160,  125,  119,  126,
      121,  126,  122,  129,  128,   91,  129,  126,  139,  127,
      126,  127,  125,  152,  119,  130,  131,  127,  130,  131,
      127,  133,  132,  123,  133,  132,  131,   59,  155,   41,

      129,  127,  132,  130,  134,   19,  135,  134,  133,  135,
      125,  152,  156,   17,  137,  127,  135,  137,  138,  140,
      136,  138,  140,  136,  131,  141,  155,  129,  141,  127,
      132,  130,  134,  136,   16,  137,  133,  140,  142,   12,
      156,  142,  127,  141,  135,  138,  143,  145,  144,  143,
      145,  144,  147,  146,  148,  147,  146,  148,  145,  134,
      157,  136,  137,  144,  148,  140,  147,  149,  158,    3,
      149,  141,  138,  143,  146,  159,  150,  161,  164,  150,
      162,  151,  154,  165,  151,  163,  145,  166,  157,  167,
      149,  144,  148,  150,  147,  151,  158,  154,  154,  168,

      143,  146,  169,  159,  170,  161,  164,  162,  171,  172,
      154,  165,  163,  173,  174,  166,  167,  149,  175,  176,
      176,  150,  176,  151,  154,  154,  168,  177,    0,  178,
      169,  179,  170,  180,  182,  171,  181,  172,  183,  184,
        0,  173,  174,  184,    0,  185,  175,  176,  176,  186,
      176,  190,  186,  191,  187,  177,  178,  187,  179,  192,
        0,  180,  182,  181,    0,  193,  183,  184,  193,    0,
      187,  184,  185,  194,  195,  203,  194,  195,  190,  193,
      191,  200,  196,  186,  200,  196,  192,  197,  198,    0,
      197,  198,  195,    0,  199,    0,  194,  199,  187,  201,

        0,  197,  201,  203,  215,  202,  204,  193,  202,  204,
      186,  196,  206,  205,  217,  199,  205,  198,  206,  202,
      195,  206,  207,  194,  208,  207,    0,  208,  204,  197,
      219,  215,  220,  201,  209,  205,  207,  209,  196,  222,
      210,  217,  199,  210,  198,  208,  211,  202,  209,  211,
      216,  212,  218,  213,  212,  204,  213,  219,  214,  220,
      201,  214,  205,  221,  207,  212,  222,  211,  224,  210,
      223,  213,  208,  225,  226,  227,  209,  228,  216,  229,
      218,  230,  232,    0,  233,  234,  235,    0,  236,  237,
      238,  221,    0,  212,  211,  224,  210,  240,  223,  213,

      225,  226,  227,  241,  228,  242,  229,  243,  230,  244,
      232,  233,  234,  245,  235,  236,  237,  246,  238,  239,
      239,  247,  248,  249,  240,  250,  251,  252,  256,  253,
      257,  241,  253,  242,  258,  243,  244,  254,    0,  267,
      254,  245,  267,    0,    0,  246,  239,  239,  247,  248,
      272,  249,  250,  251,  269,  252,  256,  253,  257,  259,
      254,  258,  259,  260,  262,  261,  260,  262,  261,  259,
      265,  263,  264,  265,  263,  264,  266,  260,  272,  266,
        0,  269,  262,  268,  253,  280,  268,  254,  261,  273,
        0,  265,  273,  268,    0,    0,  270,  259,  263,  270,

      264,    0,    0,    0,  266,  260,  271,  266,  274,  271,
      262,  274,  280,  281,  270,  261,  273,  275,  265,  282,
      275,  268,  274,  276,  271,  263,  276,  264,  277,  278,
      279,  277,  278,  279,  283,  285,  282,  284,    0,  286,
      281,  276,  270,  273,  287,    0,  288,  282,  289,  290,
      274,  292,  271,  279,  294,  295,  296,  297,  298,    0,
      278,  283,  285,  282,  299,  284,  286,  300,  301,  276,
      302,  303,  287,  288,  304,  289,  305,  290,  306,  292,
      279,  294,  307,  295,  296,  297,  298,  278,  308,  309,
        0,  310,  299,  311,  313,  300,  301,  302,  303,  316,

        0,  317,  304,  305,  318,  319,  306,  318,  319,  307,
      322,  323,  331,  324,    0,  308,  324,  309,  310,  325,
      311,  313,  325,  326,  332,  334,  326,  316,  317,  327,
      328,  329,  327,  328,  329,  337,  330,  322,  323,  330,
      331,  324,  333,  335,  336,  333,  335,  336,  340,    0,
        0,  332,  334,  327,  342,  339,  344,  338,  339,  344,
      338,  341,  337,  346,  341,  340,  347,  348,  324,  349,
      333,  338,  343,  350,  351,  343,  340,  339,  335,  336,
      327,  342,  353,  341,  355,  358,  343,    0,  356,  353,
      357,  346,  340,  347,  359,  348,  349,  333,  360,  338,

      361,  350,  351,  362,  339,  335,  336,  365,  366,  353,
      341,  367,  355,  358,  343,  356,  353,  357,  368,    0,
      369,  359,  370,  371,  372,  360,  373,  361,  374,  375,
      379,  362,  377,  381,  365,  382,  366,  383,  367,  387,
      385,  388,  386,  385,  390,  386,  368,  369,  393,    0,
      370,  371,  372,  373,  385,    0,  374,  375,  379,  377,
      381,  396,  382,  397,  383,  386,  387,  389,  388,  399,
      389,  391,  390,  392,  391,  393,  392,  394,    0,  401,
      394,  389,  385,  395,  402,  391,  395,  392,  396,  403,
      397,  398,  386,  400,  398,  404,  400,  399,  406,  407,

      394,  408,  409,    0,  410,  398,  401,  411,  412,  389,
      414,  402,  416,  391,  417,  392,  420,  403,  421,    0,
      400,  422,  404,  423,  424,  406,  407,  394,  426,  408,
      409,  410,  427,  398,  411,  428,  412,  414,  429,  416,
      430,  431,  417,  420,  433,  434,  421,  400,  434,  422,
      423,  424,  435,  436,  437,  435,  426,  438,  439,  427,
      438,  440,  428,  441,  440,  429,  441,  443,  430,  431,
      443,  433,  444,  446,  447,  448,  446,  449,  448,  443,
      454,  436,  437,  450,  451,  439,  452,  453,  457,  459,
      460,  515,  461,  462,  515,  463,  465,    0,  467,  444,

      468,  447,  469,  470,  449,  471,  472,  443,  454,  473,
      450,  451,  474,  452,  453,  457,  475,  459,  460,  461,
      476,  462,  463,  477,  465,  467,  478,  468,  479,  480,
      469,  470,  481,  471,  472,  481,  482,  473,  483,  483,
      474,  484,  485,  475,  487,  488,  481,  476,  489,  490,
      477,  491,  492,  478,  493,  479,  494,  480,  495,  497,
        0,  499,  500,  482,  501,  502,  483,  483,  503,  484,
      485,  487,  488,  504,  481,  489,  490,  505,  507,  491,
      492,  493,  506,  508,  494,  510,  495,  497,  499,  500,
      511,  501,  513,  502,  514,  503,  517,  518,    0,  520,

      521,  504,  523,  524,  526,  505,  507,  525,  527,  506,
      508,  528,  529,  510,  530,    0,  531,  532,  511,  534,
      513,  536,  514,  538,  517,  518,  520,  521,  539,  540,
      523,  524,  526,  541,  525,  542,  527,  543,  528,  546,
      529,  547,  530,  531,  532,  550,  534,  551,  536,  553,
      538,  554,  555,    0,  557,  539,  558,  540,  559,  560,
      541,  561,  563,  542,  564,  543,  546,  565,  566,  547,
      567,  568,  570,  550,  571,  551,  572,  553,  554,  573,
      555,  557,  574,  577,  558,  575,  559,  560,  561,  563,
      576,  564,  578,  579,  565,  581,  566,  567,  568,  582,

      570,  571,  583,  585,  572,  587,  589,  573,  588,  591,
      574,  577,  575,  592,  593,  594,  595,  576,  596,  578,
      579,  597,  598,  581,  599,    0,  600,  582,  601,  583,
      585,  602,  603,  587,  589,  588,  591,  604,  605,  607,
      592,  609,  593,  594,  595,  596,  610,  611,  597,  598,
      612,  613,  599,  600,  614,  601,  615,  616,  602,  603,
      617,    0,  619,  620,  621,  604,  605,  607,  622,  609,
      623,  624,  626,  627,  610,  611,  628,  629,  612,  613,
      630,  631,  614,  615,  616,  632,  633,  634,  617,  619,
      620,  636,  621,  637,  638,  622,  639,  623,  624,  640,

      626,  627,  641,  628,  642,  629,  643,  630,  631,  644,
        0,  647,  632,  648,  633,  634,  649,  650,  636,  651,
      652,  637,  638,  639,  653,  654,  655,  640,  656,  641,
      657,  658,  642,  643,  659,  660,  662,  644,  647,  661,
      663,  648,  664,  649,  650,  667,  651,  668,  652,  669,
      670,  653,  654,  655,  671,  656,  673,  657,  658,  674,
      676,  659,  677,  660,  662,  678,  661,  679,  663,  664,
      680,  681,  682,  667,  683,  668,  684,  669,  670,  685,
      686,  687,  671,  673,  688,  689,  674,  690,  676,  692,
      677,  693,  694,  678,  679,  695,  696,  680,  697,  681,

      682,  683,  698,  684,  700,  702,  685,  686,  703,  687,
      704,  688,  689,  705,  707,  690,  708,  692,  693,  694,
        0,    0,  695,  696,    0,  697,    0,    0,    0,  698,
        0,  700,  702,    0,    0,  703,    0,  704,    0,    0,
      705,  707,    0,  708,  713,  713,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,

      712,  712,  712,  712,  712,  712,  712,  712,  712,  712,
      712,  712,  712,  712,  712,  712,  712,  712,  712
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "pddl+.lex"
#line 2 "pddl+.lex"

#include <string>

#include <fstream>
  using std::cin;
  using std::cout;
  using std::cerr;
  using std::istream;
  using namespace VAL;
extern "C" int yywrap();

#line 1064 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 26 "pddl+.lex"

#line 1174 "lex.yy.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 713 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1747 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 27 "pddl+.lex"
{return OPEN_BRAC;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 28 "pddl+.lex"
{return CLOSE_BRAC;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 29 "pddl+.lex"
{return OPEN_SQ;}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 30 "pddl+.lex"
{return CLOSE_SQ;}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 31 "pddl+.lex"
{return REQS;}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 32 "pddl+.lex"
{return EQUALITY;}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 33 "pddl+.lex"
{return STRIPS;}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 34 "pddl+.lex"
{return ADL;}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 35 "pddl+.lex"
{return TYPING;}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 36 "pddl+.lex"
{return DISJUNCTIVE_PRECONDS;}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 37 "pddl+.lex"
{return EXT_PRECS;}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 38 "pddl+.lex"
{return UNIV_PRECS;}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 39 "pddl+.lex"
{return QUANT_PRECS;}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 40 "pddl+.lex"
{return COND_EFFS;}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 41 "pddl+.lex"
{return FLUENTS;}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 42 "pddl+.lex"
{return FLUENTS;}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 43 "pddl+.lex"
{return TIME;}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 44 "pddl+.lex"
{return PREFERENCES;}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 45 "pddl+.lex"
{return CONSTRAINTS;}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 46 "pddl+.lex"
{return CONSTANTS;}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 47 "pddl+.lex"
{return PREDS;}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 48 "pddl+.lex"
{return FUNCTIONS;}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 49 "pddl+.lex"
{return TYPES;}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 50 "pddl+.lex"
{return DURATIVE_ACTIONS;}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 51 "pddl+.lex"
{return DURATION_INEQUALITIES;}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 52 "pddl+.lex"
{return CONTINUOUS_EFFECTS;}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 53 "pddl+.lex"
{return NEGATIVE_PRECONDITIONS;}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 54 "pddl+.lex"
{return DERIVED_PREDICATES;}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 55 "pddl+.lex"
{return TIMED_INITIAL_LITERALS;}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 56 "pddl+.lex"
{return DEFINE;}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 57 "pddl+.lex"
{return PDDLDOMAIN;}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 58 "pddl+.lex"
{return ACTION;}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 59 "pddl+.lex"
{return PROCESS;}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 60 "pddl+.lex"
{return EVENT;}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 61 "pddl+.lex"
{return DURATIVE_ACTION;}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 62 "pddl+.lex"
{return DERIVED;}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 63 "pddl+.lex"
{return ARGS;}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 64 "pddl+.lex"
{return PRE;}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 65 "pddl+.lex"
{return CONDITION;}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 66 "pddl+.lex"
{return START_PRE;}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 67 "pddl+.lex"
{return END_PRE;}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 68 "pddl+.lex"
{return AT_START;}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 69 "pddl+.lex"
{return AT_END;}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 70 "pddl+.lex"
{return OVER_ALL;}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 71 "pddl+.lex"
{return EFFECTS;}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 72 "pddl+.lex"
{return INITIAL_EFFECT;}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 73 "pddl+.lex"
{return FINAL_EFFECT;}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 74 "pddl+.lex"
{return INVARIANT;}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 75 "pddl+.lex"
{return DURATION;}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 76 "pddl+.lex"
{return AND;}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 77 "pddl+.lex"
{return OR;}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 78 "pddl+.lex"
{return EXISTS;}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 79 "pddl+.lex"
{return FORALL;}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 80 "pddl+.lex"
{return IMPLY;}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 81 "pddl+.lex"
{return NOT;}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 82 "pddl+.lex"
{return WHEN;}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 83 "pddl+.lex"
{return WHENEVER;}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 84 "pddl+.lex"
{return EITHER;}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 85 "pddl+.lex"
{return PROBLEM;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 86 "pddl+.lex"
{return FORDOMAIN;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 87 "pddl+.lex"
{return OBJECTS;}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 88 "pddl+.lex"
{return INITIALLY;}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 89 "pddl+.lex"
{return GOALS;}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 90 "pddl+.lex"
{return EQ;}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 91 "pddl+.lex"
{return LENGTH;}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 92 "pddl+.lex"
{return SERIAL;}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 93 "pddl+.lex"
{return PARALLEL;}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 94 "pddl+.lex"
{return METRIC;}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 95 "pddl+.lex"
{return MINIMIZE;}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 96 "pddl+.lex"
{return MAXIMIZE;}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 97 "pddl+.lex"
{return ISVIOLATED;}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 98 "pddl+.lex"
{return HASHT;}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 99 "pddl+.lex"
{return DURATION_VAR;}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 100 "pddl+.lex"
{return TOTAL_TIME;}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 101 "pddl+.lex"
{return TIME;}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 102 "pddl+.lex"
{return INCREASE;}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 103 "pddl+.lex"
{return DECREASE;}
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 104 "pddl+.lex"
{return SCALE_UP;}
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 105 "pddl+.lex"
{return SCALE_DOWN;}
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 106 "pddl+.lex"
{return ASSIGN;}
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 107 "pddl+.lex"
{return PREFERENCE;}
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 108 "pddl+.lex"
{return ALWAYS;}
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 109 "pddl+.lex"
{return SOMETIME;}
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 110 "pddl+.lex"
{return WITHIN;}
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 111 "pddl+.lex"
{return ATMOSTONCE;}
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 112 "pddl+.lex"
{return SOMETIMEAFTER;}
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 113 "pddl+.lex"
{return SOMETIMEBEFORE;}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 114 "pddl+.lex"
{return ALWAYSWITHIN;}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 115 "pddl+.lex"
{return HOLDDURING;}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 116 "pddl+.lex"
{return HOLDAFTER;}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 117 "pddl+.lex"
{return PLUS;}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 118 "pddl+.lex"
{return HYPHEN;}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 119 "pddl+.lex"
{return MUL;}
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 120 "pddl+.lex"
{return DIV;}
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 121 "pddl+.lex"
{return GREATER;}
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 122 "pddl+.lex"
{return GREATEQ;}
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 123 "pddl+.lex"
{return LESS;}
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 124 "pddl+.lex"
{return LESSEQ;}
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 125 "pddl+.lex"
{return Q;}
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 126 "pddl+.lex"
{return COLON;}
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 128 "pddl+.lex"
{unsigned int i;
           for(i = 3;i < strlen(yytext);++i)
           {
           	  if(yytext[i] != '\t' && yytext[i] != ' ') break;
           };
           yylval.fval = atof(yytext+i);
			return (AT_TIME);
          }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 138 "pddl+.lex"
{unsigned int i; 
          yylval.cp = new char[strlen(yytext)+1];
          strcpy(yylval.cp,yytext);
	  for(i = 0;i<strlen(yylval.cp);i++)
	      yylval.cp[i] = tolower(yylval.cp[i]);
	  // If symbol is registered as a function symbol,
	  // return token FUNCTION_SYMBOL else return NAME
	  //cout << yytext << " " << line_no << "\n";
	  if (current_analysis->func_tab.symbol_probe(yylval.cp) != NULL)
	      return FUNCTION_SYMBOL;
	  else
	      return NAME;}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 151 "pddl+.lex"
;
	YY_BREAK
case 104:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 152 "pddl+.lex"
;
	YY_BREAK
case 105:
/* rule 105 can match eol */
YY_RULE_SETUP
#line 153 "pddl+.lex"
{line_no++;};
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 155 "pddl+.lex"
{yylval.ival = atoi(yytext);return (INTVAL);}
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 156 "pddl+.lex"
{yylval.fval = atof(yytext);return (FLOATVAL);}
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 158 "pddl+.lex"
ECHO;
	YY_BREAK
#line 1820 "lex.yy.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 713 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 713 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 712);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 158 "pddl+.lex"




extern "C" {
int yywrap()
{
	return 1;
};
};


